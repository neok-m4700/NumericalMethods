!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	main.c	/^    double A; \/\/ Gaussian A$/;"	m	struct:_Opt_	file:
B	mg.h	/^double B;$/;"	v
C	mg.h	/^double C;$/;"	v
CG	main.c	/^enum { MG, CG, MG_CG, SOR } methods;$/;"	e	enum:__anon1	file:
DMAX	nrutil.h	/^#define DMAX(/;"	d
DMIN	nrutil.h	/^#define DMIN(/;"	d
DSQR	nrutil.h	/^#define DSQR(/;"	d
FMAX	nrutil.h	/^#define FMAX(/;"	d
FMIN	nrutil.h	/^#define FMIN(/;"	d
FREE_ARG	nrutil.c	/^#define FREE_ARG /;"	d	file:
IMAX	nrutil.h	/^#define IMAX(/;"	d
IMIN	nrutil.h	/^#define IMIN(/;"	d
LMAX	nrutil.h	/^#define LMAX(/;"	d
LMIN	nrutil.h	/^#define LMIN(/;"	d
MG	main.c	/^enum { MG, CG, MG_CG, SOR } methods;$/;"	e	enum:__anon1	file:
MG_CG	main.c	/^enum { MG, CG, MG_CG, SOR } methods;$/;"	e	enum:__anon1	file:
N	main.c	/^    int N; \/\/number of time steps$/;"	m	struct:_Opt_	file:
NGMAX	mg.h	/^#define NGMAX /;"	d
NPOST	mg.h	/^#define NPOST /;"	d
NPRE	mg.h	/^#define NPRE /;"	d
NR_END	nrutil.c	/^#define NR_END /;"	d	file:
Opt	main.c	/^} Opt;$/;"	t	typeref:struct:_Opt_	file:
SIGN	nrutil.h	/^#define SIGN(/;"	d
SOR	main.c	/^enum { MG, CG, MG_CG, SOR } methods;$/;"	e	enum:__anon1	file:
SQR	nrutil.h	/^#define SQR(/;"	d
_NR_UTILS_H_	nrutil.h	/^#define _NR_UTILS_H_$/;"	d
_Opt_	main.c	/^typedef struct _Opt_ { \/\/Options$/;"	s	file:
addint	addint.c	/^void addint(double **uf, double **uc, double **res, int nf)$/;"	f
alpha	main.c	/^    double alpha; \/\/diffusivity$/;"	m	struct:_Opt_	file:
cg	cg.c	/^void cg(double **xold, double **x, int n) {$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(a,nrl,nrh,ncl,nch)$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(float *a, long nrl, long nrh, long ncl, long nch)$/;"	f
copy	mglin.c	/^void copy(double **aout, double **ain, int n)$/;"	f
cvector	nrutil.c	/^unsigned char *cvector(long nl, long nh)$/;"	f
cvector	nrutil.c	/^unsigned char *cvector(nl,nh)$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(nrl,nrh,ncl,nch)$/;"	f
dmaxarg1	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dmaxarg2	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dminarg1	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dminarg2	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dotprod	main.c	/^double dotprod(int n, double **r1, double **r2) {$/;"	f
dsqrarg	nrutil.h	/^static double dsqrarg;$/;"	v
dt	main.c	/^    double dt; \/\/time step$/;"	m	struct:_Opt_	file:
dvector	nrutil.c	/^double *dvector(long nl, long nh)$/;"	f
dvector	nrutil.c	/^double *dvector(nl,nh)$/;"	f
dx	main.c	/^    double dx; \/\/size of step in a direction$/;"	m	struct:_Opt_	file:
f3tensor	nrutil.c	/^float ***f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh)$/;"	f
f3tensor	nrutil.c	/^float ***f3tensor(nrl,nrh,ncl,nch,ndl,ndh)$/;"	f
fill0	mglin.c	/^void fill0(double **u, int n)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(b,nrl,nrh,ncl,nch)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(unsigned char *v, long nl, long nh)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(v,nl,nh)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(double **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(m,nrl,nrh,ncl,nch)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(double *v, long nl, long nh)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(v,nl,nh)$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(float ***t, long nrl, long nrh, long ncl, long nch,$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(t,nrl,nrh,ncl,nch,ndl,ndh)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(int **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(m,nrl,nrh,ncl,nch)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(int *v, long nl, long nh)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(v,nl,nh)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(unsigned long *v, long nl, long nh)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(v,nl,nh)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(float **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(m,nrl,nrh,ncl,nch)$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(b,nrl,nrh,ncl,nch)$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_vector	nrutil.c	/^void free_vector(float *v, long nl, long nh)$/;"	f
free_vector	nrutil.c	/^void free_vector(v,nl,nh)$/;"	f
gaussian	main.c	/^void gaussian(Opt *o, double **b){$/;"	f
imatrix	nrutil.c	/^int **imatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
imatrix	nrutil.c	/^int **imatrix(nrl,nrh,ncl,nch)$/;"	f
imaxarg1	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
imaxarg2	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
iminarg1	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
iminarg2	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
interp	interp.c	/^void interp(double **uf, double **uc, int nf)$/;"	f
ivector	nrutil.c	/^int *ivector(long nl, long nh)$/;"	f
ivector	nrutil.c	/^int *ivector(nl,nh)$/;"	f
lmaxarg1	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lmaxarg2	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lminarg1	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lminarg2	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lvector	nrutil.c	/^unsigned long *lvector(long nl, long nh)$/;"	f
lvector	nrutil.c	/^unsigned long *lvector(nl,nh)$/;"	f
main	main.c	/^int main(int argc, char **argv) {$/;"	f
matrix	nrutil.c	/^float **matrix(long nrl, long nrh, long ncl, long nch)$/;"	f
matrix	nrutil.c	/^float **matrix(nrl,nrh,ncl,nch)$/;"	f
maxarg1	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
maxarg2	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
methods	main.c	/^enum { MG, CG, MG_CG, SOR } methods;$/;"	v	typeref:enum:__anon1
mgcg	mgcg.c	/^void mgcg(double **xold, double **x, int n) {$/;"	f
mglin	mglin.c	/^void mglin(double **u, int n, int ncycle){$/;"	f
minarg1	nrutil.h	/^static float minarg1,minarg2;$/;"	v
minarg2	nrutil.h	/^static float minarg1,minarg2;$/;"	v
n	main.c	/^    int n; \/\/number of steps in a direction$/;"	m	struct:_Opt_	file:
noise	main.c	/^void noise(Opt *o, double **b) {$/;"	f
nrerror	nrutil.c	/^void nrerror(char error_text[])$/;"	f
nrerror	nrutil.c	/^void nrerror(error_text)$/;"	f
print_output	main.c	/^void print_output(Opt *o, double **b) {$/;"	f
r	main.c	/^    double r; \/\/noise scaling$/;"	m	struct:_Opt_	file:
relax	relax.c	/^void relax(double **u, double **xold, int n)$/;"	f
resid	resid.c	/^void resid(double **res, double **u, double **xold, int n)$/;"	f
rstrct	rstrc.c	/^void rstrct(double **uc, double **uf, int nc)$/;"	f
save_output	main.c	/^void save_output(Opt *o, double **b) {$/;"	f
sig	main.c	/^    double sig; \/\/ Gaussian sigma$/;"	m	struct:_Opt_	file:
slvsml	slvsml.c	/^void slvsml(double **u, double **rhs)$/;"	f
sor	sor.c	/^void sor(double **xold, int n, double w)$/;"	f
source	main.c	/^    double source; \/\/source$/;"	m	struct:_Opt_	file:
sqrarg	nrutil.h	/^static float sqrarg;$/;"	v
submatrix	nrutil.c	/^float **submatrix(a,oldrl,oldrh,oldcl,oldch,newrl,newcl)$/;"	f
submatrix	nrutil.c	/^float **submatrix(float **a, long oldrl, long oldrh, long oldcl, long oldch,$/;"	f
vector	nrutil.c	/^float *vector(long nl, long nh)$/;"	f
vector	nrutil.c	/^float *vector(nl,nh)$/;"	f
